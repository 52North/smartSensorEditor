<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2014-2015 52°North Initiative for Geospatial Open Source
    Software GmbH

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License version 2 as published
    by the Free Software Foundation.

    If the program is linked with libraries which are licensed under one of
    the following licenses, the combination of the program with the linked
    library is not considered a "derivative work" of the program:

        - Apache License, version 2.0
        - Apache Software License, version 1.0
        - GNU Lesser General Public License, version 3
        - Mozilla Public License, versions 1.0, 1.1 and 2.0
        - Common Development and Distribution License (CDDL), version 1.0

    Therefore the distribution of the program linked with libraries licensed
    under the aforementioned licenses, is permitted by the copyright holders
    if the distribution is compliant with both the GNU General Public
    License version 2 and the aforementioned licenses.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    Public License for more details.

-->
<!-- ========================================================================== 
	SensorML Profile for Discovery of Sensor Platforms A Schematron (ISO 19757-3) 
	Schema For SensorML 1.0.1 Version 0.1 =========================================================================== 
	DESCRIPTION: This file comprises a Schematron[1] schema for the Sensor Model 
	Language (SensorML) [2] defined by the OGC [3]. This profile can be considered 
	as a means to create SensorML documents for the discovery of sensor platforms 
	(e.g. weather stations). The platform is modelled as a 'System' while its 
	attached sensors are described as 'Components'. The profile is especially 
	intended to be applied to SensorML documents returned by the DescribeSensor 
	operation of a Sensor Observation Service [4]. The flexible structure of 
	SensorML is reduced by this profile. It restricts the SensorML schema to 
	a sufficient subset which can be used to model sensor platforms with intention 
	to be discoverable. It defines several "optional" elements and attributes 
	as "required" for the definition of stations. So, the profile definition 
	eases the use of SensorML on the client-side. If services comply to the profile 
	restrictions the clients can refer to them. A client which has to make use 
	of SensorML descriptions of stations doesn't have to support the whole SensorML 
	schema, but just the restricted one defined by the profile. Please provide 
	any comments or feedback on this validator to Daniel Nüst (d.nuest@52north.org). 
	REFERENCES: [1] http://www.schematron.com/iso/Schematron.html [2] http://www.opengeospatial.org/standards/sensorml 
	[3] http://www.opengeospatial.org [4] http://www.opengeospatial.org/standards/sos -->
	
	
	<!-- !!! not changed for SensorML 2.0 -->
<sch:schema xmlns="http://purl.oclc.org/dsdl/schematron"
	xmlns:sml="http://www.opengis.net/sensorML/1.0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:swe="http://www.opengis.net/swe/1.0.1" xmlns:gml="http://www.opengis.net/gml"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xsi:schemaLocation="http://www.opengis.net/sensorML/1.0.1 http://schemas.opengis.net/sensorML/1.0.1/sensorML.xsd"
	schemaVersion="ISO19757-3" xmlns:sch="http://purl.oclc.org/dsdl/schematron"
	queryBinding="xslt2">
	<ns prefix="sml" uri="http://www.opengis.net/sensorML/1.0.1" />
	<ns prefix="gml" uri="http://www.opengis.net/gml" />
	<ns prefix="swe" uri="http://www.opengis.net/swe/1.0.1" />
	<ns prefix="xlink" uri="http://www.w3.org/1999/xlink" />
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- System Validation -->
	<!-- This pattern validates the parts of the SensorML document which are 
		specific for a System. -->
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<sch:pattern id="SystemValidation">
		<!-- A SensorML document contains one "member" element. Each "member" contains 
			a "Process" instance (either a "Component" or a "System") which shall be 
			discoverable. -->
		<sch:rule context="/">
			<sch:assert test="count(//sml:member) = 1">errors.validation.SML.member</sch:assert>
			<sch:assert test="count(//sml:member/sml:System) = 1">errors.validation.SML.system</sch:assert>
		</sch:rule>
	</sch:pattern>
	<sch:pattern id="GeneralValidation">
		<!-- A "description", "keywords", "contact", "inputs" and "outputs" element 
			has to be present. -->
		<sch:rule context="//sml:System">
			<sch:assert test="sml:keywords/sml:KeywordList">errors.validation.SML.KeywordList</sch:assert>
		</sch:rule>
		<sch:rule context="//sml:Component">
			<sch:assert test="sml:keywords/sml:KeywordList">errors.validation.SML.KeywordList</sch:assert>
		</sch:rule>
		<!-- Each "identifier/Term" element contained in the "IdentifierList" must 
			have a "definition" attribute. This attribute links to the semantics of the 
			identifier. -->
		<sch:rule
			context="//sml:identification/sml:IdentifierList/sml:identifier/sml:Term">
			<sch:assert test="string-length(@definition) > 0">errors.validation.SML.identification.definition</sch:assert>
		</sch:rule>
		<!-- One identifier has to contain the definition "urn:ogc:def:identifier:OGC:1.0:uniqueID". 
			The value of its contained "Term" element uniquely identifies the instance. 
			One identifier has to contain the definition "urn:ogc:def:identifier:OGC:1.0:longName". 
			The value of its contained "Term" element represents a human understandable 
			name for the instance. One identifier has to contain the definition "urn:ogc:def:identifier:OGC:1.0:shortName". 
			The value of its contained "Term" element represents a short representation 
			of the human understandable name for the instance. -->
		<sch:rule context="//sml:identification">
			<sch:assert
				test="count(sml:IdentifierList/sml:identifier/sml:Term[@definition = 'urn:ogc:def:identifier:OGC:1.0:uniqueID']) = 1">errors.validation.SML.identification.uniqueID</sch:assert>
			<sch:assert
				test="count(sml:IdentifierList/sml:identifier/sml:Term[@definition = 'urn:ogc:def:identifier:OGC:1.0:longName']) = 1">errors.validation.SML.identification.longName</sch:assert>
			<sch:assert
				test="count(sml:IdentifierList/sml:identifier/sml:Term[@definition = 'urn:ogc:def:identifier:OGC:1.0:shortName']) = 1">errors.validation.SML.identification.shortName</sch:assert>
		</sch:rule>
	</sch:pattern>



	 <sch:pattern id="GeneralValidationExtended">

		<sch:rule context="//sml:identification">
			<sch:let name="uniqueIDExtended_Text"
				value="sml:IdentifierList/sml:identifier/sml:Term[@definition = 'urn:ogc:def:identifier:OGC:1.0:uniqueID']/sml:value/text()" />
			<sch:assert test="$uniqueIDExtended_Text"
				id="storage[&quot;smlUniqueID&quot;].id">errors.validation.SML.extended.uniqueID</sch:assert>

			<sch:let name="longNameExtended_Text"
				value="sml:IdentifierList/sml:identifier/sml:Term[@definition = 'urn:ogc:def:identifier:OGC:1.0:longName']/sml:value/text()" />
			<sch:assert test="$longNameExtended_Text"
				id="storage[&quot;smlLongName&quot;].longName">errors.validation.SML.extended.longName</sch:assert>

			<sch:let name="shortNameExtended_Text"
				value="sml:IdentifierList/sml:identifier/sml:Term[@definition = 'urn:ogc:def:identifier:OGC:1.0:shortName']/sml:value/text()" />
			<sch:assert test="$shortNameExtended_Text"
				id="storage[&quot;smlShortName&quot;].shortName">errors.validation.SML.extended.shortName</sch:assert>
		</sch:rule>

		<sch:rule context="//sml:System">
			<sch:let name="oneKeywordSystem" value="//sml:keywords/sml:KeywordList/sml:keyword/text()" />
			<sch:assert test="$oneKeywordSystem" id="storage[&quot;smlKeyword&quot;].items">errors.validation.SML.extended.keyword</sch:assert>
		</sch:rule>

		<sch:rule context="//sml:Component">
			<sch:let name="oneKeywordComponent" value="//sml:keywords/sml:KeywordList/sml:keyword/text()" />
			<sch:assert test="$oneKeywordComponent" id="storage[&quot;smlKeyword&quot;].items">errors.validation.SML.extended.keyword</sch:assert>
		</sch:rule>
	</sch:pattern> 
</sch:schema>